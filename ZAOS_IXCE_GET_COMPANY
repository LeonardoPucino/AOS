FUNCTION zaos_ixce_get_company.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  EXPORTING
*"     REFERENCE(E_RETURN) TYPE  ZAOS_IXCE_COMPANY_PARAM_T
*"----------------------------------------------------------------------

  TYPES: BEGIN OF ty_result,
           str(1024),
         END   OF ty_result.

  DATA: lo_http_client                 TYPE REF TO if_http_client,
        lv_http_error_descr            TYPE string,
        lv_http_error_descr_long       TYPE xstring,
        lv_http_return_code  	         TYPE i,
        lv_access_token_str_found      TYPE boole_d,
        lv_expire_str_found            TYPE boole_d,
        lv_auth_url                    TYPE string,
        lv_open_url                    TYPE string,
        lv_aoos_url                    TYPE string,
        lv_xml_result_str              TYPE string,
        lv_cdata                       TYPE string,
        lv_content_length_value        TYPE i,
        lv_strlen                      TYPE i,
        lv_client_id                   TYPE localfile,
        lv_client_secret               TYPE localfile,
        lv_username                    TYPE localfile,
        lv_password                    TYPE localfile,
        lv_access_token                TYPE string,
        lv_token_expire_seconds        TYPE char10,
        lv_body                        TYPE string,
        lv_access_token_post_string    TYPE string,
        lv_access_token_post_str_lcase TYPE localfile,
        lv_grant                       TYPE zixce_grant_type,
        lv_identificativo_aoos         TYPE string,
        lv_uo_url                      TYPE string,
        lv_identificativo_uo           TYPE string,
        lv_class_url                   TYPE string,
        lv_identificativo_classe       TYPE string,
        lv_identificativo_versamento   TYPE string,
        lt_itab_result                 TYPE TABLE OF ty_result,
        ls_get_aoos                    TYPE zaos_ixce_get_aoos,
        ls_open_package                TYPE zaos_ixce_open_package,
        lo_aos_methods                 TYPE REF TO zcl_aos_methods,
        lt_xml_data                    TYPE TABLE OF smum_xmltb,
        lv_proxy                       TYPE string,
        lv_port                        TYPE string,
        ls_return                      TYPE zaos_ixce_company_param,
        lt_return                      TYPE zaos_ixce_company_param_t.

  CLEAR: lo_http_client,
         lv_http_error_descr,
         lv_http_error_descr_long,
         lv_http_return_code,
         lv_access_token_str_found,
         lv_expire_str_found,
         lv_auth_url,
         lv_open_url,
         lv_xml_result_str,
         lv_cdata,
         lv_content_length_value,
         lv_strlen,
         lv_client_id,
         lv_client_secret,
         lv_username,
         lv_password,
         lv_access_token,
         lv_token_expire_seconds,
         lv_body,
         lv_access_token_post_string,
         lv_access_token_post_str_lcase,
         lv_identificativo_aoos,
         lv_uo_url,
         lv_identificativo_uo,
         lv_class_url,
         lv_identificativo_classe,
         lv_identificativo_versamento,
         lt_itab_result,
         ls_get_aoos,
         ls_open_package,
         lt_xml_data,
         lv_proxy,
         lv_port,
         ls_return,
         lt_return.

  SELECT SINGLE *
    FROM zaos_auth_user
    INTO @DATA(ls_user)
    WHERE uname = @sy-uname
      AND sysid = @sy-sysid.
  IF sy-subrc = 0.
    lv_username      = ls_user-username.
    lv_password      = ls_user-password.
  ELSE.
    MESSAGE e027(zaos_message).
  ENDIF.

  SELECT SINGLE *
    FROM zaos_ixce_param
    INTO @DATA(ls_param)
    WHERE sysid = @sy-sysid.
  IF sy-subrc = 0.
    lv_auth_url      = ls_param-auth_url.
    lv_open_url      = ls_param-open_url.
    lv_grant         = ls_param-grant_type.
    lv_proxy         = ls_param-proxy.
    lv_port          = ls_param-port.
  ELSE.
    MESSAGE e027(zaos_message).
  ENDIF.

  CHECK ls_param IS NOT INITIAL.

  CREATE OBJECT lo_aos_methods.

**********************************************************************
*               IX-CE Basic Authentication
**********************************************************************

** Create the HTTP client
  CALL METHOD cl_http_client=>create_by_url
    EXPORTING
      url                = lv_auth_url
      proxy_host         = lv_proxy
      proxy_service      = lv_port
    IMPORTING
      client             = lo_http_client
    EXCEPTIONS
      argument_not_found = 1
      plugin_not_active  = 2
      internal_error     = 3
      OTHERS             = 4.

* Set up the HTTP Post
  CALL METHOD lo_http_client->request->set_method
    EXPORTING
      method = 'POST'.

  CALL METHOD lo_http_client->request->set_version
    EXPORTING
      version = if_http_request=>co_protocol_version_1_0.   " 1.0


  lo_http_client->request->set_header_field(
      name = 'Content-Type'
      value = 'application/x-www-form-urlencoded'
      ).

  CONCATENATE 'grant_type=password'                  '&'
              'username='           lv_username      '&'
              'password='           lv_password
         INTO lv_cdata.

  lv_content_length_value = strlen( lv_cdata ).

  CALL METHOD lo_http_client->request->if_http_entity~set_cdata
    EXPORTING
      data   = lv_cdata
      length = lv_content_length_value
      offset = 0.

* Send the HTTP Post
  CALL METHOD lo_http_client->send
    EXPORTING
      timeout                    = 15
    EXCEPTIONS
      http_communication_failure = 1
      http_invalid_state         = 2.

* Disable SAP's pop-up for user id and password:
  lo_http_client->propertytype_logon_popup = lo_http_client->co_disabled.

*Read the Response
  CALL METHOD lo_http_client->receive
    EXCEPTIONS
      http_communication_failure = 1
      http_invalid_state         = 2
      http_processing_failed     = 3.

* Get the HTTP return code from the HTTP POST:
  lo_http_client->response->get_status( IMPORTING code   = lv_http_return_code ).
  lo_http_client->response->get_status( IMPORTING reason = lv_http_error_descr ).
  lv_http_error_descr_long = lo_http_client->response->get_raw_message( ).

* Refresh the Request after each POST:
  CALL METHOD lo_http_client->refresh_request(
    EXCEPTIONS
      http_action_failed = 1
      OTHERS             = 2 ).

  IF lv_http_return_code <> '200'.
    "e_return = lv_http_error_descr_long.
    EXIT.
  ENDIF.

**********************************************************************
*               Get IX-CE Access Token
**********************************************************************

  CLEAR lv_xml_result_str.
  lv_xml_result_str = lo_http_client->response->get_cdata( ).

  SPLIT lv_xml_result_str AT '"' INTO TABLE lt_itab_result.

  CLEAR: lv_access_token_str_found,
         lv_expire_str_found.

  LOOP AT lt_itab_result ASSIGNING FIELD-SYMBOL(<fs_result>).
    CASE <fs_result>-str.
      WHEN 'access_token'.
        lv_access_token_str_found = abap_true.
      WHEN 'expires_in'.
        lv_expire_str_found       = abap_true.
      WHEN OTHERS.
        IF lv_access_token_str_found EQ abap_true AND lv_access_token IS INITIAL.
          lv_strlen = strlen( <fs_result>-str ).
          IF lv_strlen > 30.
            lv_access_token = <fs_result>-str.
          ENDIF.
        ENDIF.

        IF lv_expire_str_found EQ abap_true AND lv_token_expire_seconds IS INITIAL AND <fs_result>-str CS '0'.
          REPLACE ':' WITH space INTO <fs_result>-str.
          REPLACE '#' WITH space INTO <fs_result>-str.
          REPLACE '}' WITH space INTO <fs_result>-str.
          SHIFT <fs_result>-str BY 1 PLACES RIGHT CIRCULAR.
          WHILE <fs_result>-str(1) EQ space.
            SHIFT <fs_result>-str BY 1 PLACES RIGHT CIRCULAR.
          ENDWHILE.
          <fs_result>-str(1) = ' '.
          SHIFT <fs_result>-str LEFT DELETING LEADING space.
          lv_token_expire_seconds = <fs_result>-str.
        ENDIF.
    ENDCASE.
  ENDLOOP.

**********************************************************************
*               Get IX-CE AAOS
**********************************************************************

  "lv_aoos_url = 'https://ixapidemo.arxivar.it/Conservation/api/v2/aoo/aoos'.
  lv_aoos_url = ls_param-aoos_url.

** Create the HTTP client
  CALL METHOD cl_http_client=>create_by_url
    EXPORTING
      url                = lv_aoos_url
      proxy_host         = lv_proxy
      proxy_service      = lv_port
    IMPORTING
      client             = lo_http_client
    EXCEPTIONS
      argument_not_found = 1
      plugin_not_active  = 2
      internal_error     = 3
      OTHERS             = 4.

* Set up the HTTP Post
  CALL METHOD lo_http_client->request->set_method
    EXPORTING
      method = 'GET'.

  CALL METHOD lo_http_client->request->set_version
    EXPORTING
      version = if_http_request=>co_protocol_version_1_0.   " 1.0

  lo_http_client->request->set_header_field( name = 'Content-Type'    value = 'application/xml' ).
  lo_http_client->request->set_header_field( name = 'Accept'          value = 'application/xml' ).
  lo_http_client->request->set_header_field( name = 'X-Authorization' value = lv_access_token ).

* Send the HTTP Post to the URL
  CALL METHOD lo_http_client->send
    EXPORTING
      timeout                    = 15
    EXCEPTIONS
      http_communication_failure = 1
      http_invalid_state         = 2.

  lo_http_client->propertytype_logon_popup = lo_http_client->co_disabled.

*Read the Response
  CALL METHOD lo_http_client->receive
    EXCEPTIONS
      http_communication_failure = 1
      http_invalid_state         = 2
      http_processing_failed     = 3.

* Get the HTTP return code from the HTTP POST:
  lo_http_client->response->get_status( IMPORTING code   = lv_http_return_code ).
  lo_http_client->response->get_status( IMPORTING reason = lv_http_error_descr ).
  lv_http_error_descr_long = lo_http_client->response->get_raw_message( ).

* Refresh the Request after each POST:
  CALL METHOD lo_http_client->refresh_request(
    EXCEPTIONS
      http_action_failed = 1
      OTHERS             = 2 ).

  IF lv_http_return_code <> '200'.
    "e_return = lv_http_error_descr_long.
    EXIT.
  ENDIF.

**********************************************************************
*               Get IX-CE AAOS Identifier
**********************************************************************

  CLEAR: lv_xml_result_str, lt_itab_result.
  lv_xml_result_str = lo_http_client->response->get_cdata( ).

  SPLIT lv_xml_result_str AT '"' INTO TABLE lt_itab_result.

  CALL METHOD lo_aos_methods->convert_xml_to_table
    EXPORTING
      i_xml_string = lv_xml_result_str
    IMPORTING
      e_xml_data   = lt_xml_data.

  CLEAR: ls_return.

  LOOP AT lt_xml_data ASSIGNING FIELD-SYMBOL(<fs_xml_data>).
    IF <fs_xml_data> IS ASSIGNED.
      CASE <fs_xml_data>-cname.
        WHEN 'identificativo'.
          ls_return-identificativo_aoos = <fs_xml_data>-cvalue.
          lv_identificativo_aoos        = <fs_xml_data>-cvalue.
        WHEN 'nome'.
          ls_return-nome                = <fs_xml_data>-cvalue.
          APPEND ls_return TO e_return.
          CLEAR: ls_return.
      ENDCASE.
    ENDIF.
  ENDLOOP.

  DELETE e_return WHERE identificativo_aoos IS INITIAL.
**********************************************************************
*               Get IX-CE UO
**********************************************************************

  lt_return[] = e_return[].

  LOOP AT lt_return ASSIGNING FIELD-SYMBOL(<return>).
    IF <return> IS ASSIGNED.

      "lv_uo_url = 'https://ixapidemo.arxivar.it/Conservation/api/v2/aoo/aoos/&AOOS&/UO'.
      lv_uo_url = ls_param-uo_url.
      CLEAR: lv_identificativo_aoos.
      lv_identificativo_aoos = <return>-identificativo_aoos.

      REPLACE '&AOOS&' IN lv_uo_url WITH lv_identificativo_aoos.

** Create the HTTP client
      CALL METHOD cl_http_client=>create_by_url
        EXPORTING
          url                = lv_uo_url
          proxy_host         = lv_proxy
          proxy_service      = lv_port
        IMPORTING
          client             = lo_http_client
        EXCEPTIONS
          argument_not_found = 1
          plugin_not_active  = 2
          internal_error     = 3
          OTHERS             = 4.

* Set up the HTTP Post
      CALL METHOD lo_http_client->request->set_method
        EXPORTING
          method = 'GET'.

      CALL METHOD lo_http_client->request->set_version
        EXPORTING
          version = if_http_request=>co_protocol_version_1_0.   " 1.0

      lo_http_client->request->set_header_field( name = 'Content-Type'    value = 'application/xml' ).
      lo_http_client->request->set_header_field( name = 'Accept'          value = 'application/xml' ).
      lo_http_client->request->set_header_field( name = 'X-Authorization' value = lv_access_token ).

* Send the HTTP Post to the URL
      CALL METHOD lo_http_client->send
        EXPORTING
          timeout                    = 15
        EXCEPTIONS
          http_communication_failure = 1
          http_invalid_state         = 2.

      lo_http_client->propertytype_logon_popup = lo_http_client->co_disabled.

*Read the Response
      CALL METHOD lo_http_client->receive
        EXCEPTIONS
          http_communication_failure = 1
          http_invalid_state         = 2
          http_processing_failed     = 3.

* Get the HTTP return code from the HTTP POST:
      lo_http_client->response->get_status( IMPORTING code   = lv_http_return_code ).
      lo_http_client->response->get_status( IMPORTING reason = lv_http_error_descr ).
      lv_http_error_descr_long = lo_http_client->response->get_raw_message( ).

* Refresh the Request after each POST:
      CALL METHOD lo_http_client->refresh_request(
        EXCEPTIONS
          http_action_failed = 1
          OTHERS             = 2 ).

      IF lv_http_return_code <> '200'.
        "e_return = lv_http_error_descr_long.
        EXIT.
      ENDIF.

**********************************************************************
*               Get IX-CE UO Identifier
**********************************************************************

      CLEAR: lv_xml_result_str, lt_itab_result.
      lv_xml_result_str = lo_http_client->response->get_cdata( ).

      CALL METHOD lo_aos_methods->convert_xml_to_table
        EXPORTING
          i_xml_string = lv_xml_result_str
        IMPORTING
          e_xml_data   = lt_xml_data.

      LOOP AT lt_xml_data ASSIGNING <fs_xml_data>.
        IF <fs_xml_data> IS ASSIGNED.
          CASE <fs_xml_data>-cname.
            WHEN 'identificativo'.
              lv_identificativo_uo          = <fs_xml_data>-cvalue.
            WHEN 'nome'.
              ls_return-nome                = <fs_xml_data>-cvalue.
              READ TABLE e_return ASSIGNING FIELD-SYMBOL(<fs_return>)
                WITH KEY nome = ls_return-nome.
              IF sy-subrc = 0.
                <fs_return>-identificativo_uo = lv_identificativo_uo.
                CLEAR: ls_return, lv_identificativo_uo.
              ENDIF.
          ENDCASE.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDLOOP.

ENDFUNCTION.
